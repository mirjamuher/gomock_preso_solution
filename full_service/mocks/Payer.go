// Code generated by mockery. DO NOT EDIT.

package mocks_payment

import (
	payment "github.com/mirjamuher/gomock_preso_solution/full_service/internal/payment"
	mock "github.com/stretchr/testify/mock"
)

// Payer is an autogenerated mock type for the Payer type
type Payer struct {
	mock.Mock
}

type Payer_Expecter struct {
	mock *mock.Mock
}

func (_m *Payer) EXPECT() *Payer_Expecter {
	return &Payer_Expecter{mock: &_m.Mock}
}

// ProcessPayment provides a mock function with given fields: p
func (_m *Payer) ProcessPayment(p *payment.Payment) (payment.State, error) {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 payment.State
	var r1 error
	if rf, ok := ret.Get(0).(func(*payment.Payment) (payment.State, error)); ok {
		return rf(p)
	}
	if rf, ok := ret.Get(0).(func(*payment.Payment) payment.State); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(payment.State)
	}

	if rf, ok := ret.Get(1).(func(*payment.Payment) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Payer_ProcessPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPayment'
type Payer_ProcessPayment_Call struct {
	*mock.Call
}

// ProcessPayment is a helper method to define mock.On call
//   - p *payment.Payment
func (_e *Payer_Expecter) ProcessPayment(p interface{}) *Payer_ProcessPayment_Call {
	return &Payer_ProcessPayment_Call{Call: _e.mock.On("ProcessPayment", p)}
}

func (_c *Payer_ProcessPayment_Call) Run(run func(p *payment.Payment)) *Payer_ProcessPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*payment.Payment))
	})
	return _c
}

func (_c *Payer_ProcessPayment_Call) Return(_a0 payment.State, _a1 error) *Payer_ProcessPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Payer_ProcessPayment_Call) RunAndReturn(run func(*payment.Payment) (payment.State, error)) *Payer_ProcessPayment_Call {
	_c.Call.Return(run)
	return _c
}

// RefundPayment provides a mock function with given fields: p
func (_m *Payer) RefundPayment(p *payment.Payment) error {
	ret := _m.Called(p)

	if len(ret) == 0 {
		panic("no return value specified for RefundPayment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*payment.Payment) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Payer_RefundPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundPayment'
type Payer_RefundPayment_Call struct {
	*mock.Call
}

// RefundPayment is a helper method to define mock.On call
//   - p *payment.Payment
func (_e *Payer_Expecter) RefundPayment(p interface{}) *Payer_RefundPayment_Call {
	return &Payer_RefundPayment_Call{Call: _e.mock.On("RefundPayment", p)}
}

func (_c *Payer_RefundPayment_Call) Run(run func(p *payment.Payment)) *Payer_RefundPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*payment.Payment))
	})
	return _c
}

func (_c *Payer_RefundPayment_Call) Return(_a0 error) *Payer_RefundPayment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Payer_RefundPayment_Call) RunAndReturn(run func(*payment.Payment) error) *Payer_RefundPayment_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAndReturnReason provides a mock function with given fields: r
func (_m *Payer) UpdateAndReturnReason(r *payment.Reason) *payment.Reason {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAndReturnReason")
	}

	var r0 *payment.Reason
	if rf, ok := ret.Get(0).(func(*payment.Reason) *payment.Reason); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*payment.Reason)
		}
	}

	return r0
}

// Payer_UpdateAndReturnReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAndReturnReason'
type Payer_UpdateAndReturnReason_Call struct {
	*mock.Call
}

// UpdateAndReturnReason is a helper method to define mock.On call
//   - r *payment.Reason
func (_e *Payer_Expecter) UpdateAndReturnReason(r interface{}) *Payer_UpdateAndReturnReason_Call {
	return &Payer_UpdateAndReturnReason_Call{Call: _e.mock.On("UpdateAndReturnReason", r)}
}

func (_c *Payer_UpdateAndReturnReason_Call) Run(run func(r *payment.Reason)) *Payer_UpdateAndReturnReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*payment.Reason))
	})
	return _c
}

func (_c *Payer_UpdateAndReturnReason_Call) Return(_a0 *payment.Reason) *Payer_UpdateAndReturnReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Payer_UpdateAndReturnReason_Call) RunAndReturn(run func(*payment.Reason) *payment.Reason) *Payer_UpdateAndReturnReason_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReason provides a mock function with given fields: r
func (_m *Payer) UpdateReason(r *payment.Reason) error {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReason")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*payment.Reason) error); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Payer_UpdateReason_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReason'
type Payer_UpdateReason_Call struct {
	*mock.Call
}

// UpdateReason is a helper method to define mock.On call
//   - r *payment.Reason
func (_e *Payer_Expecter) UpdateReason(r interface{}) *Payer_UpdateReason_Call {
	return &Payer_UpdateReason_Call{Call: _e.mock.On("UpdateReason", r)}
}

func (_c *Payer_UpdateReason_Call) Run(run func(r *payment.Reason)) *Payer_UpdateReason_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*payment.Reason))
	})
	return _c
}

func (_c *Payer_UpdateReason_Call) Return(_a0 error) *Payer_UpdateReason_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Payer_UpdateReason_Call) RunAndReturn(run func(*payment.Reason) error) *Payer_UpdateReason_Call {
	_c.Call.Return(run)
	return _c
}

// NewPayer creates a new instance of Payer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPayer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Payer {
	mock := &Payer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
